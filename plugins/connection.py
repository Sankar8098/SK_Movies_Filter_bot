from pyrogram import filters, Client, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database.connections_mdb import add_connection, all_connections, if_active, delete_connection
from info import ADMINS
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)


@Client.on_message((filters.private | filters.group) & filters.command('connect'))
async def addconnection(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f"N·¥á…¥…¢·¥Ä A·¥Ö·¥Ö Ä·¥áss I ü ü·¥Ä T ú·¥Ä A·¥Ö·¥ç…™…¥ ü§£ Use /connect {message.chat.id} in PM")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        try:
            cmd, group_id = message.text.split(" ", 1)
        except:
            await message.reply_text(
                "<b>Enter in correct format!</b>\n\n"
                "<code>/connect groupid</code>\n\n"
                "<i>Y·¥á…¥…¥·¥Ä U…¥…¢·¥Ä G Ä·¥è·¥ú·¥ò L·¥Ä A·¥Ö·¥Ö P·¥Ä…¥…¥…™ G Ä·¥è·¥ú·¥ò I·¥Ö Y·¥á·¥Ö·¥ú·¥õ ú·¥ú·¥ã·¥è…¥…¢·¥Ä  <code>/id</code></i>",
                quote=True
            )
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        group_id = message.chat.id

    try:
        st = await client.get_chat_member(group_id, userid)
        if (
                st.status != enums.ChatMemberStatus.ADMINISTRATOR
                and st.status != enums.ChatMemberStatus.OWNER
                and userid not in ADMINS
        ):
            await message.reply_text("U…¥…¢·¥Ä G Ä·¥è·¥ú·¥ò Y·¥á…¥…¥·¥Ä K·¥Ä…¥·¥Ö…™·¥ò·¥Ä A·¥Ö·¥ç…™…¥ A·¥ã·¥Ä…¥·¥ú·¥ç", quote=True)
            return
    except Exception as e:
        logger.exception(e)
        await message.reply_text(
            "Invalid Group ID!\n\nIf correct, N·¥Ä U…¥…¢·¥Ä G Ä·¥è·¥ú·¥ò L·¥Ä E Ä·¥ú·¥ã·¥á…¥ …¥·¥Ä ‚Ä¢ C ú·¥á·¥Ñ·¥ã P·¥Ä…¥…¥·¥ú…¥…¢·¥Ä!!",
            quote=True,
        )

        return
    try:
        st = await client.get_chat_member(group_id, "me")
        if st.status == enums.ChatMemberStatus.ADMINISTRATOR:
            ttl = await client.get_chat(group_id)
            title = ttl.title

            addcon = await add_connection(str(group_id), str(userid))
            if addcon:
                await message.reply_text(
                    f"S·¥ú·¥Ñ·¥Ñ·¥ássF·¥ú ü ü è J·¥è…™…¥ P·¥Ä…¥…¥…™·¥õ·¥á…¥ T·¥è **{title}**\nNow M·¥Ä…¥·¥Ä…¢·¥á U Ä G Ä·¥è·¥ú·¥ò S·¥á·¥õ·¥õ…™…¥…¢ I…¥ M è P·¥ç!",
                    quote=True,
                    parse_mode=enums.ParseMode.MARKDOWN
                )
                if chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
                    await client.send_message(
                        userid,
                        f"Connected to **{title}** !",
                        parse_mode=enums.ParseMode.MARKDOWN
                    )
            else:
                await message.reply_text(
                    "N·¥Ä A ü Ä·¥á·¥Ä·¥Ö è I…¥·¥õ ú·¥Ä G Ä·¥è·¥ú·¥ò L·¥Ä J·¥è…™…¥ P·¥Ä…¥…¥…™·¥õ·¥á…¥",
                    quote=True
                )
        else:
            await message.reply_text("I…¥·¥õ ú·¥Ä G Ä·¥è·¥ú·¥ò L·¥Ä E…¥…¥·¥Ä A·¥Ö·¥ç…™…¥ A·¥ã·¥ú…¥…¢·¥Ä", quote=True)
    except Exception as e:
        logger.exception(e)
        await message.reply_text('E·¥õ ú·¥è P Ä·¥è ô ü·¥á·¥ç T ú…™ Ä·¥ú·¥ç ô…™ T Ä è P·¥Ä…¥…¥·¥ú…¥…¢·¥Ä', quote=True)
        return


@Client.on_message((filters.private | filters.group) & filters.command('disconnect'))
async def deleteconnection(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f"N·¥á…¥…¢·¥Ä A·¥Ö·¥Ö Ä·¥áss I ü ü·¥Ä T ú·¥Ä A·¥Ö·¥ç…™…¥ Use /connect {message.chat.id} in PM")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        await message.reply_text("Run /connections T·¥è N·¥Ä E…¥T ú·¥Ä E…¥T ú·¥Ä G Ä·¥è·¥ú·¥ò L·¥Ä E Ä·¥ú·¥ã·¥á…¥ N·¥ú P·¥Ä Ä·¥ú…¥…¢·¥Ä!", quote=True)

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        group_id = message.chat.id

        st = await client.get_chat_member(group_id, userid)
        if (
                st.status != enums.ChatMemberStatus.ADMINISTRATOR
                and st.status != enums.ChatMemberStatus.OWNER
                and str(userid) not in ADMINS
        ):
            return

        delcon = await delete_connection(str(userid), str(group_id))
        if delcon:
            await message.reply_text("S·¥ú·¥Ñ·¥Ñ·¥ássF·¥ú ü ü è I…¥·¥õ ú·¥Ä G Ä·¥è·¥ú·¥ò V…™·¥õ·¥õ·¥ú V·¥á ü…™ è·¥Ä P·¥è…™·¥õ·¥á…¥", quote=True)
        else:
            await message.reply_text("N·¥Ä I…¥·¥ú·¥ç I…¥·¥õ ú·¥Ä G Ä·¥è·¥ú·¥ò L·¥Ä C·¥è…¥…¥·¥á·¥Ñ·¥õ A…¢·¥Ä ü·¥Ä\nDo /connect to connect.", quote=True)


@Client.on_message(filters.private & filters.command(["connections"]))
async def connections(client, message):
    userid = message.from_user.id

    groupids = await all_connections(str(userid))
    if groupids is None:
        await message.reply_text(
            "E…¥·¥õ ú·¥Ä G Ä·¥è·¥ú·¥ò L·¥Ä è·¥ú·¥ç N·¥Ä I ü ü·¥Ä F…™ Äs·¥õ A·¥Ö·¥Ö P·¥Ä…¥…¥·¥ú…¥…¢·¥Ä",
            quote=True
        )
        return
    buttons = []
    for groupid in groupids:
        try:
            ttl = await client.get_chat(int(groupid))
            title = ttl.title
            active = await if_active(str(userid), str(groupid))
            act = " - ACTIVE" if active else ""
            buttons.append(
                [
                    InlineKeyboardButton(
                        text=f"{title}{act}", callback_data=f"groupcb:{groupid}:{act}"
                    )
                ]
            )
        except:
            pass
    if buttons:
        await message.reply_text(
            "U…¥…¢·¥Ä G Ä·¥è·¥ú·¥ò D·¥á·¥õ·¥Ä…™ üs ;\n\n",
            reply_markup=InlineKeyboardMarkup(buttons),
            quote=True
        )
    else:
        await message.reply_text(
            "E…¥·¥õ ú·¥Ä G Ä·¥è·¥ú·¥ò L·¥Ä è·¥ú·¥ç N·¥Ä I ü ü·¥Ä F…™ Äs·¥õ A·¥Ö·¥Ö P·¥Ä…¥…¥·¥ú…¥…¢·¥Ä.",
            quote=True
        )
